Структура проекта:
├── src/
│   ├── main.c                  // Главный цикл и инициализация
│   ├── stm32f4xx_it.c          // Обработчики прерываний
├── Drivers/
│   ├──  const.h           // определение Констант (размеры стола, координаты сопла, режим шага и т.п.)
├── lib/
│   ├── GCode_Parser/           // Парсинг G-кода
│   │   ├── gcode_parser.c
│   │   └── gcode_parser.h
│   ├── Stepper_Motion/         // Управление шаговиками и интерполяция
│   │   ├── stepper.c
│   │   └── stepper.h
│   ├── Wire_Feeder/            // Управление подачей проволоки
│   │   ├── feeder.c
│   │   └── feeder.h
│   ├── Endstops/               // Обработка концевиков
│   │   ├── endstops.c
│   │   └── endstops.h
│   ├── Coordinate_Converter/   // Преобразование координат
│   │   ├── coord_convert.c
│   │   └── coord_convert.h
│   └── UART_Handler/           // Прием/отправка данных
│       ├── uart_handler.c
│       └── uart_handler.h












Алгоритм работы

[Start]
  │
  ▼
Инициализация:
- Настройка GPIO, таймеров, UART
- Калибровка (поиск нуля через концевики)
  │
  ▼
Главный цикл:
├── Прием G-кода по UART → Буфер
├── Парсинг G-кода:
│   ├── G0/G1: Извлечение X,Y,Z,F
│   └── Преобразование координат (рабочие → абсолютные)
├── Добавление в очередь движений
├── Планирование движения:
│   ├── Расчет шагов для осей (интерполяция)
│   ├── Расчет ускорения/замедления
│   └── Генерация STEP/DIR импульсов
├── Управление подачей проволоки (PWM + DIR)
└── Проверка концевиков (аварийный стоп)